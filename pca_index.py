# -*- coding: utf-8 -*-
"""PCA Index.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j-2d-KQ4eW3P8lYj7T1v9gDnOPVeqOTT
"""

import pandas as pd
import numpy as np

from sklearn.decomposition import PCA
from sklearn import preprocessing

from statsmodels.stats.outliers_influence import variance_inflation_factor

from google.colab import files
uploaded = files.upload()

data = pd.read_csv("covid_facilityPrepScores-v2.0.csv", encoding='cp1252')

data.shape

data.info()

# Creating a new dataset with numerical variables
numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

new_data = data.select_dtypes(include=numerics)

new_data.shape

new_data.head()

# Dropping varaiables that do not have scores
new_data.drop(new_data.iloc[:, 0:55], inplace=True, axis=1)
new_data.head()

new_data.drop(['isHealthFacility'], axis = 1, inplace = True)
new_data.head()

new_data.shape

new_data.info()

# Checking for multicollinearity
vif_data = pd.DataFrame()
vif_data["feature"] =  new_data.columns

vif_data["VIF"] = [variance_inflation_factor(new_data.values, i)for i in range(len(new_data.columns))]

print(vif_data)

correlation = new_data.corr()
correlation

X = new_data.to_numpy()

X = preprocessing.StandardScaler().fit_transform(X)

"""import matplotlib.pyplot as plt

pca = PCA().fit(X)

plt.style.use("ggplot")
plt.plot(pca.explained_variance_, marker='o')
plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")"""

pca = PCA(9)

X_pca = pca.fit_transform(X)

print("Explained Variance of Each Component:")
print(pca.explained_variance_ratio_)

out_sum = np.cumsum(pca.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum)

#pca.components_

# Create dataframes for each indicator
equipment = new_data.filter(regex = 'equip')
equipment.shape

infrastructure = new_data.filter(regex = 'infra')
infrastructure.shape

ipc = new_data.filter(regex = 'ipc')
ipc.drop(['post_hr_f_ipc', 'post_cap_a_ipc'], inplace = True, axis = 1)
ipc.shape

hr = new_data.filter(regex = 'hr')
hr.shape

case_mgmt = new_data.filter(regex = 'cm')
case_mgmt.shape

capacity = new_data.filter(regex = 'cap' )
capacity.shape

pim = new_data.filter(regex = 'pim')
pim.shape

sss = new_data.filter(regex = 'sss')
sss.shape

shw = new_data.filter(regex = 'shw')
shw.shape

dis = new_data.filter(regex = 'disinfect')
dis.drop(['post_cap_a_disinfection'], inplace = True, axis = 1)
dis.shape

# PCA for each indicator to come up with sub indicators
X_e = equipment.to_numpy()

X_e = preprocessing.StandardScaler().fit_transform(X_e)

import matplotlib.pyplot as plt

pca_e = PCA().fit(X_e)

plt.style.use("ggplot")

plt.plot(pca_e.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_e = PCA(1)

X_pca_e = pca_e.fit_transform(X_e)

print("Explained Variance of Each Component:")
print(pca_e.explained_variance_ratio_)

out_sum_e = np.cumsum(pca_e.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_e)

#pca_e.components_

equip_score = np.dot(X_e, pca_e.components_.transpose())
#equip_score

# Infrastructure
X_i = infrastructure.to_numpy()

X_i = preprocessing.StandardScaler().fit_transform(X_i)

import matplotlib.pyplot as plt

pca_i = PCA().fit(X_i)

plt.style.use("ggplot")

plt.plot(pca_i.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_i = PCA(1)

X_pca_i = pca_i.fit_transform(X_i)

print("Explained Variance of Each Component:")
print(pca_i.explained_variance_ratio_)

out_sum_i = np.cumsum(pca_i.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_i)

# ipc
X_ipc = ipc.to_numpy()

X_ipc = preprocessing.StandardScaler().fit_transform(X_ipc)

import matplotlib.pyplot as plt

pca_ipc = PCA().fit(X_ipc)

plt.style.use("ggplot")

plt.plot(pca_ipc.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_ipc = PCA(1)

X_pca_ipc = pca_ipc.fit_transform(X_ipc)

print("Explained Variance of Each Component:")
print(pca_ipc.explained_variance_ratio_)

out_sum_ipc = np.cumsum(pca_ipc.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_ipc)

# hr
X_hr = hr.to_numpy()

X_hr = preprocessing.StandardScaler().fit_transform(X_hr)

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize = (10,5))

pca_hr = PCA().fit(X_hr)

plt.style.use("ggplot")

plt.plot(pca_hr.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_hr = PCA(1)

X_pca_hr = pca_hr.fit_transform(X_hr)

print("Explained Variance of Each Component:")
print(pca_hr.explained_variance_ratio_)

out_sum_hr = np.cumsum(pca_hr.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_hr)

#case management
X_cm = case_mgmt.to_numpy()

X_cm = preprocessing.StandardScaler().fit_transform(X_cm)

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize = (10,5))

pca_cm = PCA().fit(X_cm)

plt.style.use("ggplot")

plt.plot(pca_cm.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_cm = PCA(1)

X_pca_cm = pca_cm.fit_transform(X_cm)

print("Explained Variance of Each Component:")
print(pca_cm.explained_variance_ratio_)

out_sum_cm = np.cumsum(pca_cm.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_cm)

# Capacity Building
X_cb = capacity.to_numpy()

X_cb = preprocessing.StandardScaler().fit_transform(X_cb)

import matplotlib.pyplot as plt

pca_cb = PCA().fit(X_cb)

plt.style.use("ggplot")

plt.plot(pca_cb.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_cb = PCA(1)

X_pca_cb = pca_cb.fit_transform(X_cb)

print("Explained Variance of Each Component:")
print(pca_cb.explained_variance_ratio_)

out_sum_cb = np.cumsum(pca_cb.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_cb)

#Patient information Management
X_pim = pim.to_numpy()

X_pim = preprocessing.StandardScaler().fit_transform(X_pim)

import matplotlib.pyplot as plt

pca_pim = PCA().fit(X_pim)

plt.style.use("ggplot")

plt.plot(pca_pim.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_pim = PCA(1)

X_pca_pim = pca_pim.fit_transform(X_pim)

print("Explained Variance of Each Component:")
print(pca_pim.explained_variance_ratio_)

out_sum_pim = np.cumsum(pca_pim.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_pim)

#Support Structure and Services
X_sss = sss.to_numpy()

X_sss = preprocessing.StandardScaler().fit_transform(X_sss)

import matplotlib.pyplot as plt

pca_sss = PCA().fit(X_sss)

plt.style.use("ggplot")

plt.plot(pca_sss.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_sss = PCA(1)

X_pca_sss = pca_sss.fit_transform(X_sss)

print("Explained Variance of Each Component:")
print(pca_sss.explained_variance_ratio_)

out_sum_sss = np.cumsum(pca_sss.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_sss)

pca_sss.components_

#Support Structures and Services for health workers
X_shw = shw.to_numpy()

X_shw = preprocessing.StandardScaler().fit_transform(X_shw)

import matplotlib.pyplot as plt

pca_shw = PCA().fit(X_shw)

plt.style.use("ggplot")

plt.plot(pca_shw.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_shw = PCA(1)

X_pca_shw = pca_shw.fit_transform(X_shw)

print("Explained Variance of Each Component:")
print(pca_shw.explained_variance_ratio_)

out_sum_shw = np.cumsum(pca_shw.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_shw)

pca_shw.components_

shw_score = np.dot(X_shw, pca_shw.components_.transpose())
shw_score

#Disinfection teams
X_dis = dis.to_numpy()

X_dis = preprocessing.StandardScaler().fit_transform(X_dis)

import matplotlib.pyplot as plt

pca_dis = PCA().fit(X_dis)

plt.style.use("ggplot")

plt.plot(pca_dis.explained_variance_, marker='o')

plt.xlabel("Eigenvalue number")
plt.ylabel("Eigenvalue size")
plt.title("Scree Plot")

pca_dis = PCA(1)

X_pca_dis = pca_dis.fit_transform(X_dis)

print("Explained Variance of Each Component:")
print(pca_dis.explained_variance_ratio_)

out_sum_dis = np.cumsum(pca_dis.explained_variance_ratio_)
print ("Cumulative Prop. Variance Explained: ", out_sum_dis)

pca_dis.components_

dis_score = np.dot(X_dis, pca_dis.components_.transpose())
dis_score

# Get the aggregated indicator score for each facility
pca_equipment = pd.DataFrame(equip_score, columns = ['Equipment Score'])
pca_equipment.sample()

#Infrastructure
i_score = np.dot(X_i ,pca_i.components_.transpose())
i_score
pca_infrastructure = pd.DataFrame(i_score, columns = ['Infrastructure Score'])
pca_infrastructure.sample()

#IPC
ipc_score = np.dot(X_ipc, pca_ipc.components_.transpose())
ipc_score
pca_ipc = pd.DataFrame(ipc_score, columns = ['IPC Score'])
pca_ipc.sample()

#HR
hr_score = np.dot(X_hr, pca_hr.components_.transpose())
hr_score
pca_hr = pd.DataFrame(hr_score, columns = ['HR Score'])
pca_hr.sample()

#Case Managament
cm_score = np.dot(X_cm, pca_cm.components_.transpose())
cm_score
pca_case = pd.DataFrame(cm_score, columns = ['Case Management Score'])
pca_case.sample()

#Capacity Building
cb_score = np.dot(X_cb, pca_cb.components_.transpose())
cb_score
pca_capacity = pd.DataFrame(cb_score, columns = ['Capacity Building Score'])
pca_capacity.sample()

#Patient Information Management
pim_score = np.dot(X_pim, pca_pim.components_.transpose())
pim_score
pca_pim = pd.DataFrame(pim_score, columns = ['PIM Score'])
pca_pim.sample()

#Support Structure and Services
sss_score = np.dot(X_sss, pca_sss.components_.transpose())
sss_score
pca_sss = pd.DataFrame(sss_score, columns = ['SSS Score'])
pca_sss.sample()

#Support Structure and Services for health workers
pca_shw = pd.DataFrame(shw_score, columns = ['SHW Score'])
pca_shw.sample()

#Disinfection Teams
pca_dis = pd.DataFrame(dis_score, columns = ['Disinfection Team Score'])
pca_dis.sample()

"""for i in X_dis:
  pca_dis['DIS Score2'] = np.sum(i * X_pca_dis)

pca_dis.sample()"""

# Combine the different scores into one dataframe
combination = pd.concat([pca_equipment['Equipment Score'], pca_infrastructure['Infrastructure Score'],pca_ipc['IPC Score'],pca_hr['HR Score'],pca_case['Case Management Score'],pca_capacity['Capacity Building Score'], pca_pim['PIM Score'],pca_sss['SSS Score'],pca_shw['SHW Score'],pca_dis['Disinfection Team Score']], axis = 1)
combination.sample(5)

# Calculate the weights of each indicator
equipment_weight = len(equipment.columns)/len(new_data.columns)
infrastructure_weight = len(infrastructure.columns)/len(new_data.columns)
ipc_weight = len(ipc.columns)/len(new_data.columns)
hr_weight = len(hr.columns)/len(new_data.columns)
case_weight = len(case_mgmt.columns)/len(new_data.columns)
capacity_weight = len(capacity.columns)/len(new_data.columns)
pim_weight = len(pim.columns)/len(new_data.columns)
sss_weight = len(sss.columns)/len(new_data.columns)
shw_weight = len(shw.columns)/len(new_data.columns)
dis_weight = len(dis.columns)/ len(new_data.columns)


print("1. Equipment Weight:" ,equipment_weight)
print("2. Infrastructure Weight:" ,infrastructure_weight)
print("3. IPC Weight:" ,ipc_weight)
print("4. HR Weight:" ,hr_weight)
print("5. Case Management Weight:" ,case_weight)
print("6. Capacity Building Weight:" ,capacity_weight)
print("7. Patient Information Management", pim_weight)
print("8. SSS Weight", sss_weight)
print("9. SHW Weight", shw_weight)
print("10.Disinfection Team", dis_weight)

weights = pd.DataFrame([equipment_weight,infrastructure_weight,ipc_weight,hr_weight,case_weight,capacity_weight,pim_weight,sss_weight, shw_weight,dis_weight],index = ('Equipment','Infrastructure','IPC', 'HR', 'Case M', 'Capacity', 'PIM', 'SSS', 'SHW', 'DIS'), columns = ['Weights'])
weights

for i in combination:
  combination ['Index'] = ((equipment_weight * combination['Equipment Score']) + (infrastructure_weight * combination['Infrastructure Score'])
  + (ipc_weight * combination['IPC Score'])+ (hr_weight * combination['HR Score'])+ (case_weight * combination['Case Management Score'])+
  (capacity_weight * combination['Capacity Building Score']) + (pim_weight * combination['PIM Score']) + (sss_weight * combination['SSS Score']) +
  (shw_weight * combination['SHW Score']) +(dis_weight * combination['Disinfection Team Score']))

combination.head()

new_col = data[['fac_name','county', 'isHealthFacility','Ownership', 'Level_n','cluster']]
final = pd.concat([ new_col,combination], axis =1)

final2 =  final[final["isHealthFacility"] == 1]
final2.sample()

#final.sample(5)

final2.to_csv("covid_index.csv")

